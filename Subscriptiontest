### Backend (Spring Boot with Kotlin)

I'll start with the backend setup. This uses Spring Boot 3.x with Kotlin, JPA for Oracle database interaction, and REST APIs. Assume you have an Oracle database with tables:

- `users` (columns: `id` VARCHAR PRIMARY KEY, `name` VARCHAR)
- `analysts` (columns: `id` VARCHAR PRIMARY KEY, `name` VARCHAR)
- `companies` (columns: `ticker` VARCHAR PRIMARY KEY, `name` VARCHAR)
- `topics` (columns: `id` VARCHAR PRIMARY KEY, `name` VARCHAR)
- `subscriptions` (columns: `user_id` VARCHAR, `analyst_id` VARCHAR NULL, `company_ticker` VARCHAR NULL, `topic_id` VARCHAR NULL) – This allows flexible subscriptions to any combination.
- `reports` (columns: `id` VARCHAR PRIMARY KEY, `title` VARCHAR, `analyst_id` VARCHAR, `company_ticker` VARCHAR, `topic_id` VARCHAR, `publish_date` DATE) – For the distributed reports list.

You'll need to adjust the schema if it differs. For Oracle connection, use the Oracle JDBC driver (add `com.oracle.database.jdbc:ojdbc11` to dependencies).

#### Project Structure
```
src/main/kotlin/com/example/subscriptionapp
├── Application.kt
├── config/DatabaseConfig.kt (optional for custom config)
├── controller
│   ├── AuthController.kt
│   ├── ContentController.kt
│   └── SubscriptionController.kt
├── entity
│   ├── Analyst.kt
│   ├── Company.kt
│   ├── Report.kt
│   ├── Subscription.kt
│   ├── Topic.kt
│   └── User.kt
├── repository
│   ├── AnalystRepository.kt
│   ├── CompanyRepository.kt
│   ├── ReportRepository.kt
│   ├── SubscriptionRepository.kt
│   ├── TopicRepository.kt
│   └── UserRepository.kt
├── service
│   ├── AuthService.kt
│   ├── ContentService.kt
│   └── SubscriptionService.kt
└── dto
    ├── LoginRequest.kt
    ├── SubscriptionRequest.kt
    └── ... (other DTOs as needed)
```

#### build.gradle.kts (Gradle Build File)
```kotlin
plugins {
    id("org.springframework.boot") version "3.1.0"
    id("io.spring.dependency-management") version "1.1.0"
    kotlin("jvm") version "1.8.20"
    kotlin("plugin.spring") version "1.8.20"
    kotlin("plugin.jpa") version "1.8.20"
}

group = "com.example"
version = "0.0.1-SNAPSHOT"

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("com.oracle.database.jdbc:ojdbc11:23.2.0.0") // Oracle JDBC driver
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    runtimeOnly("com.oracle.database.jdbc:ojdbc11") // If needed for runtime
    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

tasks.withType<Test> {
    useJUnitPlatform()
}
```

#### application.yml (Configuration)
```yaml
spring:
  datasource:
    url: jdbc:oracle:thin:@//your-oracle-host:1521/your-service-name
    username: your-db-username
    password: your-db-password
    driver-class-name: oracle.jdbc.OracleDriver
  jpa:
    hibernate:
      ddl-auto: none  # Don't auto-create tables; assume they exist
    show-sql: true
server:
  port: 8080
```

#### Application.kt
```kotlin
package com.example.subscriptionapp

import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.boot.runApplication

@SpringBootApplication
class SubscriptionAppApplication

fun main(args: Array<String>) {
    runApplication<SubscriptionAppApplication>(*args)
}
```

#### Entities (Example: Analyst.kt)
```kotlin
package com.example.subscriptionapp.entity

import jakarta.persistence.Entity
import jakarta.persistence.Id
import jakarta.persistence.Table

@Entity
@Table(name = "analysts")
data class Analyst(
    @Id val id: String,
    val name: String
)

// Similarly for Company.kt (use @Id on ticker), Topic.kt, User.kt, Report.kt

@Entity
@Table(name = "subscriptions")
data class Subscription(
    @Id val id: String? = null, // Auto-generate if needed
    val userId: String,
    val analystId: String? = null,
    val companyTicker: String? = null,
    val topicId: String? = null
)
```

#### Repositories (Example: AnalystRepository.kt)
```kotlin
package com.example.subscriptionapp.repository

import com.example.subscriptionapp.entity.Analyst
import org.springframework.data.jpa.repository.JpaRepository

interface AnalystRepository : JpaRepository<Analyst, String>

// Similarly for others: CompanyRepository (String for ticker), TopicRepository, UserRepository, SubscriptionRepository, ReportRepository
```

#### Services (Example: AuthService.kt)
```kotlin
package com.example.subscriptionapp.service

import com.example.subscriptionapp.dto.LoginRequest
import com.example.subscriptionapp.repository.UserRepository
import org.springframework.stereotype.Service

@Service
class AuthService(private val userRepository: UserRepository) {

    fun checkUserExists(request: LoginRequest): Boolean {
        return userRepository.findById(request.id).isPresent
    }
}

// ContentService.kt for fetching analysts/companies/topics/reports
@Service
class ContentService(
    private val analystRepository: AnalystRepository,
    private val companyRepository: CompanyRepository,
    private val topicRepository: TopicRepository,
    private val reportRepository: ReportRepository
) {
    fun getAnalysts(): List<Analyst> = analystRepository.findAll()
    fun getCompanies(): List<Company> = companyRepository.findAll()
    fun getTopics(): List<Topic> = topicRepository.findAll()
    fun getReports(): List<Report> = reportRepository.findAll()
}

// SubscriptionService.kt
@Service
class SubscriptionService(private val subscriptionRepository: SubscriptionRepository) {
    fun saveSubscription(userId: String, request: SubscriptionRequest) {
        // Logic to save multiple subscriptions if needed
        val sub = Subscription(userId = userId, analystId = request.analystId, companyTicker = request.companyTicker, topicId = request.topicId)
        subscriptionRepository.save(sub)
    }
}
```

#### Controllers (Example: AuthController.kt)
```kotlin
package com.example.subscriptionapp.controller

import com.example.subscriptionapp.dto.LoginRequest
import com.example.subscriptionapp.service.AuthService
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RestController

@RestController
class AuthController(private val authService: AuthService) {

    @PostMapping("/api/login")
    fun login(@RequestBody request: LoginRequest): ResponseEntity<Boolean> {
        val exists = authService.checkUserExists(request)
        return ResponseEntity.ok(exists)
    }
}

// ContentController.kt
@RestController
class ContentController(private val contentService: ContentService) {
    @GetMapping("/api/analysts")
    fun getAnalysts(): List<Analyst> = contentService.getAnalysts()

    @GetMapping("/api/companies")
    fun getCompanies(): List<Company> = contentService.getCompanies()

    @GetMapping("/api/topics")
    fun getTopics(): List<Topic> = contentService.getTopics()

    @GetMapping("/api/reports")
    fun getReports(): List<Report> = contentService.getReports()
}

// SubscriptionController.kt
@RestController
class SubscriptionController(private val subscriptionService: SubscriptionService) {
    @PostMapping("/api/subscribe")
    fun subscribe(@RequestParam userId: String, @RequestBody request: SubscriptionRequest): ResponseEntity<Unit> {
        subscriptionService.saveSubscription(userId, request)
        return ResponseEntity.ok().build()
    }
}
```

#### DTOs (Example: LoginRequest.kt)
```kotlin
package com.example.subscriptionapp.dto

data class LoginRequest(
    val id: String,
    val name: String
)

data class SubscriptionRequest(
    val analystId: String? = null,
    val companyTicker: String? = null,
    val topicId: String? = null
)
```

To run: `./gradlew bootRun`. This sets up APIs like `/api/login`, `/api/analysts`, etc.

### Frontend (Angular)

Use Angular 16+. Create a new app: `ng new subscription-dashboard --style=css --routing=false`.

#### Project Structure
```
src/app
├── app.component.ts/html/css
├── app.module.ts
├── login
│   ├── login.component.ts
│   ├── login.component.html
│   └── login.component.css
├── dashboard
│   ├── dashboard.component.ts
│   ├── dashboard.component.html
│   └── dashboard.component.css
├── reports
│   ├── reports.component.ts
│   ├── reports.component.html
│   └── reports.component.css
├── services
│   └── api.service.ts
└── models
    ├── analyst.ts
    ├── company.ts
    ├── topic.ts
    ├── report.ts
    └── subscription.ts
```

#### app.module.ts
```typescript
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule } from '@angular/common/http';
import { FormsModule } from '@angular/forms';

import { AppComponent } from './app.component';
import { LoginComponent } from './login/login.component';
import { DashboardComponent } from './dashboard/dashboard.component';
import { ReportsComponent } from './reports/reports.component';
import { ApiService } from './services/api.service';

@NgModule({
  declarations: [
    AppComponent,
    LoginComponent,
    DashboardComponent,
    ReportsComponent
  ],
  imports: [
    BrowserModule,
    HttpClientModule,
    FormsModule
  ],
  providers: [ApiService],
  bootstrap: [AppComponent]
})
export class AppModule { }
```

#### Models (Example: analyst.ts)
```typescript
export interface Analyst {
  id: string;
  name: string;
}

// Similarly for Company (ticker: string, name: string), Topic, Report, etc.
```

#### api.service.ts
```typescript
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

import { Analyst } from '../models/analyst';
import { Company } from '../models/company';
import { Topic } from '../models/topic';
import { Report } from '../models/report';

@Injectable({
  providedIn: 'root'
})
export class ApiService {
  private baseUrl = 'http://localhost:8080/api'; // Adjust to your backend URL

  constructor(private http: HttpClient) { }

  login(id: string, name: string): Observable<boolean> {
    return this.http.post<boolean>(`${this.baseUrl}/login`, { id, name });
  }

  getAnalysts(): Observable<Analyst[]> {
    return this.http.get<Analyst[]>(`${this.baseUrl}/analysts`);
  }

  getCompanies(): Observable<Company[]> {
    return this.http.get<Company[]>(`${this.baseUrl}/companies`);
  }

  getTopics(): Observable<Topic[]> {
    return this.http.get<Topic[]>(`${this.baseUrl}/topics`);
  }

  getReports(): Observable<Report[]> {
    return this.http.get<Report[]>(`${this.baseUrl}/reports`);
  }

  subscribe(userId: string, subscription: any): Observable<void> {
    return this.http.post<void>(`${this.baseUrl}/subscribe?userId=${userId}`, subscription);
  }
}
```

#### login.component.ts
```typescript
import { Component } from '@angular/core';
import { ApiService } from '../services/api.service';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent {
  id: string = '';
  name: string = '';
  loggedIn: boolean = false;
  userId: string = ''; // Store after login

  constructor(private apiService: ApiService) { }

  onLogin() {
    this.apiService.login(this.id, this.name).subscribe(exists => {
      if (exists) {
        this.loggedIn = true;
        this.userId = this.id;
        // Redirect to dashboard, e.g., using Router if added
      } else {
        alert('User does not exist');
      }
    });
  }
}
```

#### login.component.html
```html
<div *ngIf="!loggedIn">
  <h2>Login</h2>
  <input [(ngModel)]="id" placeholder="Person ID" />
  <input [(ngModel)]="name" placeholder="Name" />
  <button (click)="onLogin()">Login</button>
</div>
<app-dashboard *ngIf="loggedIn" [userId]="userId"></app-dashboard>
```

#### dashboard.component.ts (Subscription Screen)
```typescript
import { Component, Input, OnInit } from '@angular/core';
import { ApiService } from '../services/api.service';
import { Analyst } from '../models/analyst';
import { Company } from '../models/company';
import { Topic } from '../models/topic';

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.css']
})
export class DashboardComponent implements OnInit {
  @Input() userId: string = '';
  analysts: Analyst[] = [];
  companies: Company[] = [];
  topics: Topic[] = [];
  selectedAnalyst: string = '';
  selectedCompany: string = '';
  selectedTopic: string = '';

  constructor(private apiService: ApiService) { }

  ngOnInit() {
    this.apiService.getAnalysts().subscribe(data => this.analysts = data);
    this.apiService.getCompanies().subscribe(data => this.companies = data);
    this.apiService.getTopics().subscribe(data => this.topics = data);
  }

  onSubscribe() {
    const sub = {
      analystId: this.selectedAnalyst || null,
      companyTicker: this.selectedCompany || null,
      topicId: this.selectedTopic || null
    };
    this.apiService.subscribe(this.userId, sub).subscribe(() => alert('Subscribed!'));
  }
}
```

#### dashboard.component.html
```html
<h2>Subscribe to Content</h2>
<select [(ngModel)]="selectedAnalyst">
  <option value="">Select Analyst</option>
  <option *ngFor="let a of analysts" [value]="a.id">{{a.name}}</option>
</select>
<select [(ngModel)]="selectedCompany">
  <option value="">Select Company</option>
  <option *ngFor="let c of companies" [value]="c.ticker">{{c.name}} ({{c.ticker}})</option>
</select>
<select [(ngModel)]="selectedTopic">
  <option value="">Select Topic</option>
  <option *ngFor="let t of topics" [value]="t.id">{{t.name}}</option>
</select>
<button (click)="onSubscribe()">Subscribe</button>

<a href="/reports">View Distributed Reports</a> <!-- Use RouterLink if routing enabled -->
```

#### reports.component.ts (Distributed Reports Screen)
```typescript
import { Component, OnInit } from '@angular/core';
import { ApiService } from '../services/api.service';
import { Report } from '../models/report';

@Component({
  selector: 'app-reports',
  templateUrl: './reports.component.html',
  styleUrls: ['./reports.component.css']
})
export class ReportsComponent implements OnInit {
  reports: Report[] = [];

  constructor(private apiService: ApiService) { }

  ngOnInit() {
    this.apiService.getReports().subscribe(data => this.reports = data);
  }
}
```

#### reports.component.html
```html
<h2>Distributed Reports</h2>
<ul>
  <li *ngFor="let r of reports">
    {{r.title}} - Analyst: {{r.analystId}}, Company: {{r.companyTicker}}, Topic: {{r.topicId}}, Date: {{r.publishDate}}
  </li>
</ul>
```

#### app.component.html
```html
<app-login></app-login>
<!-- Or use routing for navigation between components -->
```

To run: `ng serve`. The login checks existence via API, dashboard allows selecting and subscribing (saves to DB), and reports lists all distributed reports.

This is a basic implementation. Enhance with routing (add Angular Router), error handling, authentication tokens (e.g., JWT after login), and UI libraries like Angular Material for better dashboard visuals. Test DB connections and adjust entities/repositories as per your exact schema.
