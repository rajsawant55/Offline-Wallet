To convert the "GDP Channels Dashboard" to use Angular's standalone component approach (introduced in Angular 14 and enhanced in later versions), I'll rewrite the project using Angular 16 or later (as of August 2025). The standalone component approach eliminates the need for NgModules (e.g., AppModule), making the application more lightweight and modular. The dashboard will retain all functionality:
Landing Page ("GDP Channels"): Lists active channels with a toggle to view inactive ones.
Channel Details Page: Displays channel attributes and a bar chart of filter rules.
REST API Integration: Fetches data from GET /api/channels and GET /api/channels/:id.
Tech Stack: Angular, Angular Material (for UI components), NGX-Charts (for bar charts), and HttpClient (for API calls).
Key Changes from Previous Angular Version
Standalone Components: Components are marked as standalone: true, and dependencies are imported directly in each component, removing the need for app.module.ts.
Routing: Uses provideRouter in main.ts instead of AppRoutingModule.
Service: The ChannelService remains unchanged but is provided via provideHttpClient in main.ts.
Pipe: A custom pipe (filterChannels) is used for filtering active/inactive channels, implemented as a standalone pipe.
Dependencies: Same as before (Angular Material, NGX-Charts), but no NgModule imports.
Assumptions
API Endpoints:
GET /api/channels: Returns a list of channels.
GET /api/channels/:id: Returns details for a specific channel.
API Base URL: Replace http://your-api-base-url with your actual API URL.
Data Structure: Matches the previous structure:
[
  {
    "id": "CH001",
    "name": "Client A",
    "status": "Active",
    "attributes": {
      "contact": "clientA@example.com",
      "location": "New York",
      "created": "2023-01-15"
    },
    "filterRules": [
      { "rule": "Document Type", "value": "PDF", "count": 50 },
      { "rule": "Category", "value": "Finance", "count": 30 },
      { "rule": "Priority", "value": "High", "count": 20 }
    ]
  }
]
CORS: The API must support CORS if hosted on a different domain.
Project Structure
gdp-channels-dashboard/
├── src/
│   ├── app/
│   │   ├── components/
│   │   │   ├── channel-list/
│   │   │   │   ├── channel-list.component.ts
│   │   │   │   ├── channel-list.component.html
│   │   │   │   ├── channel-list.component.css
│   │   │   ├── channel-details/
│   │   │   │   ├── channel-details.component.ts
│   │   │   │   ├── channel-details.component.html
│   │   │   │   ├── channel-details.component.css
│   │   │   ├── filter-rules-chart/
│   │   │   │   ├── filter-rules-chart.component.ts
│   │   │   │   ├── filter-rules-chart.component.html
│   │   │   │   ├── filter-rules-chart.component.css
│   │   ├── pipes/
│   │   │   ├── filter-channels.pipe.ts
│   │   ├── services/
│   │   │   ├── channel.service.ts
│   │   ├── app.component.ts
│   │   ├── app.component.html
│   │   ├── app.component.css
│   ├── assets/
│   ├── index.html
│   ├── main.ts
│   ├── styles.css
├── angular.json
├── package.json
├── tsconfig.json
├── README.md
Setup Guide
Prerequisites:
Node.js (v14 or later) and npm.
Angular CLI: Install globally with npm install -g @angular/cli.
Create the Project:
ng new gdp-channels-dashboard --style=css --standalone
cd gdp-channels-dashboard
The --standalone flag sets up a project without NgModules.
Install dependencies:
npm install @angular/material @angular/cdk @swimlane/ngx-charts
Configure Angular Material:
ng add @angular/material
Choose a theme (e.g., Indigo/Pink) and enable typography and animations as needed.
File Setup:
Replace or create the files listed below.
Update the API base URL in src/app/services/channel.service.ts.
Run the Application:
ng serve
Open http://localhost:4200 to view the dashboard.
Build for Production:
ng build
Deploy the dist folder to your hosting service.
API Integration:
Update baseUrl in channel.service.ts with your API URL.
Ensure the API is running and accessible.
Create ZIP File:
After setting up the files, compress the gdp-channels-dashboard folder:
Windows: Right-click > "Send to" > "Compressed (zipped) folder".
macOS/Linux: Run:
zip -r gdp-channels-dashboard.zip gdp-channels-dashboard
Files
1. src/index.html
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>GDP Channels Dashboard</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body>
  <app-root></app-root>
</body>
</html>
2. src/styles.css
body {
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
}
3. src/main.ts
Configures standalone components and routing.
import { bootstrapApplication } from '@angular/platform-browser';
import { provideRouter } from '@angular/router';
import { provideHttpClient } from '@angular/common/http';
import { provideAnimations } from '@angular/platform-browser/animations';
import { AppComponent } from './app/app.component';
import { ChannelListComponent } from './app/components/channel-list/channel-list.component';
import { ChannelDetailsComponent } from './app/components/channel-details/channel-details.component';

bootstrapApplication(AppComponent, {
  providers: [
    provideHttpClient(),
    provideAnimations(),
    provideRouter([
      { path: '', component: ChannelListComponent },
      { path: 'channel/:id', component: ChannelDetailsComponent },
      { path: '**', redirectTo: '' }
    ])
  ]
}).catch(err => console.error(err));
4. src/app/app.component.ts
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterOutlet],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'GDP Channels Dashboard';
}
5. src/app/app.component.html
<router-outlet></router-outlet>
6. src/app/app.component.css
/* Add styles if needed */
7. src/app/services/channel.service.ts
Handles API calls.
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';

export interface Channel {
  id: string;
  name: string;
  status: string;
  attributes: {
    contact: string;
    location: string;
    created: string;
  };
  filterRules: { rule: string; value: string; count: number }[];
}

@Injectable({
  providedIn: 'root'
})
export class ChannelService {
  private baseUrl = 'http://your-api-base-url/api'; // Replace with your API base URL

  constructor(private http: HttpClient) {}

  getChannels(): Observable<Channel[]> {
    return this.http.get<Channel[]>(`${this.baseUrl}/channels`).pipe(
      catchError(this.handleError)
    );
  }

  getChannelById(id: string): Observable<Channel> {
    return this.http.get<Channel>(`${this.baseUrl}/channels/${id}`).pipe(
      catchError(this.handleError)
    );
  }

  private handleError(error: HttpErrorResponse): Observable<never> {
    const errorMessage = error.error instanceof ErrorEvent
      ? `Client-side error: ${error.error.message}`
      : `Server-side error: ${error.status} ${error.message}`;
    return throwError(() => new Error(errorMessage));
  }
}
8. src/app/pipes/filter-channels.pipe.ts
Standalone pipe to filter active/inactive channels.
import { Pipe, PipeTransform } from '@angular/core';
import { Channel } from '../services/channel.service';

@Pipe({
  name: 'filterChannels',
  standalone: true
})
export class FilterChannelsPipe implements PipeTransform {
  transform(channels: Channel[], showInactive: boolean): Channel[] {
    if (!channels) return [];
    return showInactive ? channels : channels.filter(channel => channel.status === 'Active');
  }
}
9. src/app/components/channel-list/channel-list.component.ts
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterLink } from '@angular/router';
import { MatTableModule } from '@angular/material/table';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatCardModule } from '@angular/material/card';
import { catchError, tap } from 'rxjs/operators';
import { Observable, of } from 'rxjs';
import { Channel, ChannelService } from '../../services/channel.service';
import { FilterChannelsPipe } from '../../pipes/filter-channels.pipe';

@Component({
  selector: 'app-channel-list',
  standalone: true,
  imports: [
    CommonModule,
    RouterLink,
    MatTableModule,
    MatToolbarModule,
    MatSlideToggleModule,
    MatProgressSpinnerModule,
    MatCardModule,
    FilterChannelsPipe
  ],
  templateUrl: './channel-list.component.html',
  styleUrls: ['./channel-list.component.css']
})
export class ChannelListComponent implements OnInit {
  channels$!: Observable<Channel[]>;
  showInactive: boolean = false;
  loading: boolean = true;
  error: string | null = null;

  displayedColumns: string[] = ['id', 'name', 'status'];

  constructor(private channelService: ChannelService) {}

  ngOnInit(): void {
    this.fetchChannels();
  }

  fetchChannels(): void {
    this.loading = true;
    this.channels$ = this.channelService.getChannels().pipe(
      catchError(error => {
        this.error = error.message;
        this.loading = false;
        return of([]);
      }),
      tap(() => this.loading = false)
    );
  }

  toggleInactive(): void {
    this.showInactive = !this.showInactive;
  }
}
10. src/app/components/channel-list/channel-list.component.html
<div class="container">
  <mat-toolbar>
    <span>GDP Channels</span>
  </mat-toolbar>
  <div class="toggle-container">
    <span>Show Inactive Channels</span>
    <mat-slide-toggle [(ngModel)]="showInactive" (change)="toggleInactive()"></mat-slide-toggle>
  </div>
  <div *ngIf="loading" class="loading">
    <mat-spinner></mat-spinner>
  </div>
  <div *ngIf="error" class="error">
    <mat-card>
      <mat-card-content>{{ error }}</mat-card-content>
    </mat-card>
  </div>
  <div *ngIf="!loading && !error">
    <table mat-table [dataSource]="(channels$ | async) | filterChannels:showInactive" class="mat-elevation-z8">
      <ng-container matColumnDef="id">
        <th mat-header-cell *matHeaderCellDef>Channel ID</th>
        <td mat-cell *matCellDef="let channel">
          <a [routerLink]="['/channel', channel.id]">{{ channel.id }}</a>
        </td>
      </ng-container>
      <ng-container matColumnDef="name">
        <th mat-header-cell *matHeaderCellDef>Name</th>
        <td mat-cell *matCellDef="let channel">{{ channel.name }}</td>
      </ng-container>
      <ng-container matColumnDef="status">
        <th mat-header-cell *matHeaderCellDef>Status</th>
        <td mat-cell *matCellDef="let channel">{{ channel.status }}</td>
      </ng-container>
      <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
      <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
      <tr class="mat-row" *matNoDataRow>
        <td class="mat-cell" colspan="3">No channels found.</td>
      </tr>
    </table>
  </div>
</div>
11. src/app/components/channel-list/channel-list.component.css
.container {
  padding: 24px;
}
.toggle-container {
  margin-bottom: 16px;
}
.loading, .error {
  display: flex;
  justify-content: center;
  margin-top: 24px;
}
table {
  width: 100%;
}
a {
  color: #3f51b5;
  text-decoration: none;
}
a:hover {
  text-decoration: underline;
}
12. src/app/components/channel-details/channel-details.component.ts
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute } from '@angular/router';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatCardModule } from '@angular/material/card';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatListModule } from '@angular/material/list';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { catchError, tap } from 'rxjs/operators';
import { Observable, of } from 'rxjs';
import { Channel, ChannelService } from '../../services/channel.service';
import { FilterRulesChartComponent } from '../filter-rules-chart/filter-rules-chart.component';

@Component({
  selector: 'app-channel-details',
  standalone: true,
  imports: [
    CommonModule,
    MatToolbarModule,
    MatCardModule,
    MatGridListModule,
    MatListModule,
    MatProgressSpinnerModule,
    FilterRulesChartComponent
  ],
  templateUrl: './channel-details.component.html',
  styleUrls: ['./channel-details.component.css']
})
export class ChannelDetailsComponent implements OnInit {
  channel$!: Observable<Channel | null>;
  loading: boolean = true;
  error: string | null = null;

  constructor(
    private route: ActivatedRoute,
    private channelService: ChannelService
  ) {}

  ngOnInit(): void {
    const id = this.route.snapshot.paramMap.get('id');
    if (id) {
      this.fetchChannel(id);
    }
  }

  fetchChannel(id: string): void {
    this.loading = true;
    this.channel$ = this.channelService.getChannelById(id).pipe(
      catchError(error => {
        this.error = error.message;
        this.loading = false;
        return of(null);
      }),
      tap(() => this.loading = false)
    );
  }
}
13. src/app/components/channel-details/channel-details.component.html
<div class="container">
  <mat-toolbar *ngIf="channel$ | async as channel">
    <span>Channel Details: {{ channel.name }}</span>
  </mat-toolbar>
  <div *ngIf="loading" class="loading">
    <mat-spinner></mat-spinner>
  </div>
  <div *ngIf="error" class="error">
    <mat-card>
      <mat-card-content>{{ error }}</mat-card-content>
    </mat-card>
  </div>
  <div *ngIf="!loading && !error && (channel$ | async) as channel">
    <mat-grid-list cols="2" rowHeight="400px" gutterSize="16px">
      <mat-grid-tile>
        <mat-card>
          <mat-card-header>
            <mat-card-title>Channel Information</mat-card-title>
          </mat-card-header>
          <mat-card-content>
            <mat-list>
              <mat-list-item><strong>ID:</strong> {{ channel.id }}</mat-list-item>
              <mat-list-item><strong>Name:</strong> {{ channel.name }}</mat-list-item>
              <mat-list-item><strong>Status:</strong> {{ channel.status }}</mat-list-item>
              <mat-list-item><strong>Contact:</strong> {{ channel.attributes.contact }}</mat-list-item>
              <mat-list-item><strong>Location:</strong> {{ channel.attributes.location }}</mat-list-item>
              <mat-list-item><strong>Created:</strong> {{ channel.attributes.created }}</mat-list-item>
            </mat-list>
          </mat-card-content>
        </mat-card>
      </mat-grid-tile>
      <mat-grid-tile>
        <mat-card>
          <mat-card-header>
            <mat-card-title>Filter Rules</mat-card-title>
          </mat-card-header>
          <mat-card-content>
            <app-filter-rules-chart [filterRules]="channel.filterRules"></app-filter-rules-chart>
          </mat-card-content>
        </mat-card>
      </mat-grid-tile>
    </mat-grid-list>
  </div>
  <div *ngIf="!loading && !error && !(channel$ | async)" class="no-data">
    No channel data available.
  </div>
</div>
14. src/app/components/channel-details/channel-details.component.css
.container {
  padding: 24px;
}
.loading, .error, .no-data {
  display: flex;
  justify-content: center;
  margin-top: 24px;
}
15. src/app/components/filter-rules-chart/filter-rules-chart.component.ts
import { Component, Input, OnChanges } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgxChartsModule } from '@swimlane/ngx-charts';

@Component({
  selector: 'app-filter-rules-chart',
  standalone: true,
  imports: [CommonModule, NgxChartsModule],
  templateUrl: './filter-rules-chart.component.html',
  styleUrls: ['./filter-rules-chart.component.css']
})
export class FilterRulesChartComponent implements OnChanges {
  @Input() filterRules: { rule: string; value: string; count: number }[] = [];

  chartData: any[] = [];
  view: [number, number] = [500, 300];
  showXAxis = true;
  showYAxis = true;
  showLegend = false;
  showXAxisLabel = true;
  xAxisLabel = 'Rule';
  showYAxisLabel = true;
  yAxisLabel = 'Count';

  ngOnChanges(): void {
    this.chartData = this.filterRules.map(rule => ({
      name: rule.rule,
      value: rule.count
    }));
  }
}
16. src/app/components/filter-rules-chart/filter-rules-chart.component.html
<ngx-charts-bar-vertical
  [view]="view"
  [results]="chartData"
  [xAxis]="showXAxis"
  [yAxis]="showYAxis"
  [legend]="showLegend"
  [xAxisLabel]="xAxisLabel"
  [yAxisLabel]="yAxisLabel"
>
</ngx-charts-bar-vertical>
17. src/app/components/filter-rules-chart/filter-rules-chart.component.css
:host {
  display: block;
  width: 100%;
  height: 300px;
}
18. angular.json
Default configuration from ng new. No changes needed unless customizing build options.
19. package.json
{
  "name": "gdp-channels-dashboard",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^16.0.0",
    "@angular/cdk": "^16.0.0",
    "@angular/common": "^16.0.0",
    "@angular/compiler": "^16.0.0",
    "@angular/core": "^16.0.0",
    "@angular/forms": "^16.0.0",
    "@angular/material": "^16.0.0",
    "@angular/platform-browser": "^16.0.0",
    "@angular/platform-browser-dynamic": "^16.0.0",
    "@angular/router": "^16.0.0",
    "@swimlane/ngx-charts": "^20.4.1",
    "rxjs": "~7.8.0",
    "tslib": "^2.3.0",
    "zone.js": "~0.13.0"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^16.0.0",
    "@angular/cli": "~16.0.0",
    "@angular/compiler-cli": "^16.0.0",
    "@types/jasmine": "~4.3.0",
    "jasmine-core": "~4.6.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.0.0",
    "typescript": "~4.9.5"
  }
}
20. tsconfig.json
Default configuration from ng new. No changes needed.
21. README.md
# GDP Channels Dashboard (Angular Standalone)

An Angular-based dashboard using standalone components for managing channels in an application. Displays a list of active channels with an option to view inactive ones and detailed views for each channel, including filter rules visualized as a bar chart. Data is fetched from a REST API.

## Setup Instructions

1. **Clone the Repository** (if applicable):
   ```bash
   git clone <repository-url>
   cd gdp-channels-dashboard
Install Dependencies:
npm install
Configure API Base URL:
Update the baseUrl in src/app/services/channel.service.ts:
private baseUrl = 'http://your-api-base-url/api';
Replace with your actual API URL.
Run the Application:
ng serve
Open http://localhost:4200 in your browser.
API Endpoints:
GET /api/channels: Fetch all channels.
GET /api/channels/:id: Fetch details for a specific channel.
Ensure your API supports CORS if hosted on a different domain.
Build for Production:
ng build
Deploy the dist folder to your hosting service.
Dependencies
Angular
Angular Material
NGX-Charts
RxJS
Customization
Update the API base URL in channel.service.ts.
Modify filter-rules-chart.component to customize the visualization of filter rules.
Adjust Angular Material theme in styles.css or add a custom theme.
Notes
The filter rules chart assumes a structure with rule, value, and count. Adjust as needed.
Ensure your API is accessible and returns data in the expected format.
For CORS issues, configure your backend to include appropriate headers (e.g., Access-Control-Allow-Origin).
To use a proxy for development, create proxy.conf.json:
{
  "/api": {
    "target": "http://your-api-base-url",
    "secure": false,
    "changeOrigin": true
  }
}
Update angular.json:
"serve": {
  "options": {
    "proxyConfig": "proxy.conf.json"
  }
}
### **Notes**
- **Standalone Components**:
  - Each component is marked `standalone: true` and imports its dependencies directly.
  - Routing is configured in `main.ts` using `provideRouter`.
  - The `FilterChannelsPipe` is standalone and used in `ChannelListComponent`.

- **API Integration**:
  - Update `baseUrl` in `channel.service.ts`.
  - For authentication, add headers:
    ```typescript
    this.http.get<Channel[]>(`${this.baseUrl}/channels`, {
      headers: { Authorization: `Bearer ${yourToken}` }
    });
    ```

- **Chart Customization**:
  - NGX-Charts renders a vertical bar chart. For a different chart (e.g., pie), update `filter-rules-chart.component.html`:
    ```html
    <ngx-charts-pie-chart [results]="chartData"></ngx-charts-pie-chart>
    ```

- **CORS**:
  - Use a proxy (see `README.md`) or ensure the backend includes CORS headers.

- **ZIP File**:
  - Create the directory structure, copy the files, and compress:
    ```bash
    zip -r gdp-channels-dashboard.zip gdp-channels-dashboard
    ```
  - If you prefer a GitHub Gist for download, let me know, and I’ll provide a link.

- **Testing**:
  - Run `ng test` for unit tests.
  - Debug API issues using browser developer tools.

If you need a Gist, specific API customizations, or additional features (e.g., pagination, search), please let me know!
