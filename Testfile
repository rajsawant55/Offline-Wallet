To convert the "GDP Channels Dashboard" from React to Angular, I'll rewrite the project using Angular 16 (or later, based on the latest stable version as of August 2025). The dashboard will maintain the same functionality: a landing page ("GDP Channels") listing active channels with a toggle to view inactive ones, a channel details page with attributes, and a graphical representation of filter rules using a bar chart. The data will be fetched from a REST API, as specified in your latest request.
The tech stack will include:
Angular: For building the UI and handling routing.
Angular Material: For styling and components (equivalent to Material-UI in React).
NGX-Charts: For rendering the bar chart (equivalent to Recharts).
TypeScript: For type-safe coding.
Angular HttpClient: For making REST API calls to fetch channel data.
Key Changes from React
Framework: Angular uses a component-based architecture with TypeScript, modules, and dependency injection, unlike React's JavaScript-based functional components.
Routing: Angular's @angular/router replaces react-router-dom.
Styling: Angular Material replaces Material-UI for UI components.
Charting: NGX-Charts replaces Recharts for the filter rules bar chart.
API Integration: Uses Angular's HttpClient instead of fetch.
Directory Structure: Follows Angular's conventions (e.g., components, services, modules).
Assumptions
API Endpoints:
GET /api/channels: Returns a list of channels.
GET /api/channels/:id: Returns details for a specific channel.
Data structure matches the previous mock data (see below).
API Base URL: Replace http://your-api-base-url with your actual API URL.
CORS: The API must support CORS if hosted on a different domain.
Data Structure:
[
  {
    "id": "CH001",
    "name": "Client A",
    "status": "Active",
    "attributes": {
      "contact": "clientA@example.com",
      "location": "New York",
      "created": "2023-01-15"
    },
    "filterRules": [
      { "rule": "Document Type", "value": "PDF", "count": 50 },
      { "rule": "Category", "value": "Finance", "count": 30 },
      { "rule": "Priority", "value": "High", "count": 20 }
    ]
  }
]
Project Structure
gdp-channels-dashboard/
├── src/
│   ├── app/
│   │   ├── components/
│   │   │   ├── channel-list/
│   │   │   │   ├── channel-list.component.ts
│   │   │   │   ├── channel-list.component.html
│   │   │   │   ├── channel-list.component.css
│   │   │   ├── channel-details/
│   │   │   │   ├── channel-details.component.ts
│   │   │   │   ├── channel-details.component.html
│   │   │   │   ├── channel-details.component.css
│   │   │   ├── filter-rules-chart/
│   │   │   │   ├── filter-rules-chart.component.ts
│   │   │   │   ├── filter-rules-chart.component.html
│   │   │   │   ├── filter-rules-chart.component.css
│   │   ├── services/
│   │   │   ├── channel.service.ts
│   │   ├── app.component.ts
│   │   ├── app.component.html
│   │   ├── app.component.css
│   │   ├── app.module.ts
│   │   ├── app-routing.module.ts
│   ├── assets/
│   ├── index.html
│   ├── main.ts
│   ├── styles.css
├── angular.json
├── package.json
├── tsconfig.json
├── README.md
Setup Guide
Prerequisites:
Node.js (v14 or later) and npm.
Angular CLI: Install globally with npm install -g @angular/cli.
Create the Project:
Create a new Angular project:
ng new gdp-channels-dashboard --style=css --routing=true
cd gdp-channels-dashboard
Install dependencies:
npm install @angular/material @angular/cdk @swimlane/ngx-charts
Configure Angular Material:
Add Angular Material with a theme:
ng add @angular/material
Choose a theme (e.g., Indigo/Pink) and enable typography and animations as needed.
File Setup:
Replace or create the files listed below in the project directory.
Update the API base URL in src/app/services/channel.service.ts.
Run the Application:
ng serve
Open http://localhost:4200 to view the dashboard.
Build for Production:
ng build
Deploy the dist folder to your hosting service.
API Integration:
Ensure your API is running and accessible.
Update the baseUrl in channel.service.ts to your API's base URL.
Create ZIP File:
After setting up the files, compress the gdp-channels-dashboard folder:
Windows: Right-click > "Send to" > "Compressed (zipped) folder".
macOS/Linux: Run zip -r gdp-channels-dashboard.zip gdp-channels-dashboard.
Files
1. src/index.html
Default Angular template, updated with the app title.
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>GDP Channels Dashboard</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body>
  <app-root></app-root>
</body>
</html>
2. src/styles.css
Global styles (optional customization).
/* Add global styles here */
body {
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
}
3. src/main.ts
Default Angular bootstrap file (no changes needed).
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));
4. src/app/app.module.ts
Main module with imports for Angular Material, NGX-Charts, and routing.
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule } from '@angular/common/http';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { MatTableModule } from '@angular/material/table';
import { MatCardModule } from '@angular/material/card';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatListModule } from '@angular/material/list';
import { NgxChartsModule } from '@swimlane/ngx-charts';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { ChannelListComponent } from './components/channel-list/channel-list.component';
import { ChannelDetailsComponent } from './components/channel-details/channel-details.component';
import { FilterRulesChartComponent } from './components/filter-rules-chart/filter-rules-chart.component';

@NgModule({
  declarations: [
    AppComponent,
    ChannelListComponent,
    ChannelDetailsComponent,
    FilterRulesChartComponent
  ],
  imports: [
    BrowserModule,
    HttpClientModule,
    BrowserAnimationsModule,
    MatTableModule,
    MatCardModule,
    MatToolbarModule,
    MatProgressSpinnerModule,
    MatSlideToggleModule,
    MatGridListModule,
    MatListModule,
    NgxChartsModule,
    AppRoutingModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
5. src/app/app-routing.module.ts
Routing configuration for the dashboard and channel details pages.
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { ChannelListComponent } from './components/channel-list/channel-list.component';
import { ChannelDetailsComponent } from './components/channel-details/channel-details.component';

const routes: Routes = [
  { path: '', component: ChannelListComponent },
  { path: 'channel/:id', component: ChannelDetailsComponent },
  { path: '**', redirectTo: '' }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
6. src/app/app.component.ts
Root component (minimal logic, delegates to routed components).
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'GDP Channels Dashboard';
}
7. src/app/app.component.html
Root template with router outlet.
<router-outlet></router-outlet>
8. src/app/app.component.css
Empty or add global styles if needed.
/* Add styles if needed */
9. src/app/services/channel.service.ts
Service to handle API calls for fetching channels.
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';

export interface Channel {
  id: string;
  name: string;
  status: string;
  attributes: {
    contact: string;
    location: string;
    created: string;
  };
  filterRules: { rule: string; value: string; count: number }[];
}

@Injectable({
  providedIn: 'root'
})
export class ChannelService {
  private baseUrl = 'http://your-api-base-url/api'; // Replace with your API base URL

  constructor(private http: HttpClient) {}

  getChannels(): Observable<Channel[]> {
    return this.http.get<Channel[]>(`${this.baseUrl}/channels`).pipe(
      catchError(this.handleError)
    );
  }

  getChannelById(id: string): Observable<Channel> {
    return this.http.get<Channel>(`${this.baseUrl}/channels/${id}`).pipe(
      catchError(this.handleError)
    );
  }

  private handleError(error: HttpErrorResponse): Observable<never> {
    const errorMessage = error.error instanceof ErrorEvent
      ? `Client-side error: ${error.error.message}`
      : `Server-side error: ${error.status} ${error.message}`;
    return throwError(() => new Error(errorMessage));
  }
}
10. src/app/components/channel-list/channel-list.component.ts
Component to display the channel list with a toggle for inactive channels.
import { Component, OnInit } from '@angular/core';
import { ChannelService, Channel } from '../../services/channel.service';
import { Observable, of } from 'rxjs';

@Component({
  selector: 'app-channel-list',
  templateUrl: './channel-list.component.html',
  styleUrls: ['./channel-list.component.css']
})
export class ChannelListComponent implements OnInit {
  channels$!: Observable<Channel[]>;
  showInactive: boolean = false;
  loading: boolean = true;
  error: string | null = null;

  displayedColumns: string[] = ['id', 'name', 'status'];

  constructor(private channelService: ChannelService) {}

  ngOnInit(): void {
    this.fetchChannels();
  }

  fetchChannels(): void {
    this.loading = true;
    this.channels$ = this.channelService.getChannels().pipe(
      catchError(error => {
        this.error = error.message;
        this.loading = false;
        return of([]);
      }),
      tap(() => this.loading = false)
    );
  }

  toggleInactive(): void {
    this.showInactive = !this.showInactive;
  }
}
11. src/app/components/channel-list/channel-list.component.html
Template for the channel list.
<div class="container">
  <mat-toolbar>
    <span>GDP Channels</span>
  </mat-toolbar>
  <div class="toggle-container">
    <span>Show Inactive Channels</span>
    <mat-slide-toggle [(ngModel)]="showInactive" (change)="toggleInactive()"></mat-slide-toggle>
  </div>
  <div *ngIf="loading" class="loading">
    <mat-spinner></mat-spinner>
  </div>
  <div *ngIf="error" class="error">
    <mat-card>
      <mat-card-content>{{ error }}</mat-card-content>
    </mat-card>
  </div>
  <div *ngIf="!loading && !error">
    <table mat-table [dataSource]="(channels$ | async) | filterChannels:showInactive" class="mat-elevation-z8">
      <ng-container matColumnDef="id">
        <th mat-header-cell *matHeaderCellDef>Channel ID</th>
        <td mat-cell *matCellDef="let channel">
          <a [routerLink]="['/channel', channel.id]">{{ channel.id }}</a>
        </td>
      </ng-container>
      <ng-container matColumnDef="name">
        <th mat-header-cell *matHeaderCellDef>Name</th>
        <td mat-cell *matCellDef="let channel">{{ channel.name }}</td>
      </ng-container>
      <ng-container matColumnDef="status">
        <th mat-header-cell *matHeaderCellDef>Status</th>
        <td mat-cell *matCellDef="let channel">{{ channel.status }}</td>
      </ng-container>
      <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
      <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
      <tr class="mat-row" *matNoDataRow>
        <td class="mat-cell" colspan="3">No channels found.</td>
      </tr>
    </table>
  </div>
</div>
12. src/app/components/channel-list/channel-list.component.css
Styles for the channel list.
.container {
  padding: 24px;
}
.toggle-container {
  margin-bottom: 16px;
}
.loading, .error {
  display: flex;
  justify-content: center;
  margin-top: 24px;
}
table {
  width: 100%;
}
a {
  color: #3f51b5;
  text-decoration: none;
}
a:hover {
  text-decoration: underline;
}
13. src/app/components/channel-details/channel-details.component.ts
Component to display channel details and filter rules chart.
import { Component, Input } from '@angular/core';
import { Channel } from '../../services/channel.service';

@Component({
  selector: 'app-channel-details',
  templateUrl: './channel-details.component.html',
  styleUrls: ['./channel-details.component.css']
})
export class ChannelDetailsComponent {
  @Input() channel: Channel | null = null;
}
14. src/app/components/channel-details/channel-details.component.html
Template for channel details.
<div class="container" *ngIf="channel; else noData">
  <mat-toolbar>
    <span>Channel Details: {{ channel.name }}</span>
  </mat-toolbar>
  <mat-grid-list cols="2" rowHeight="400px" gutterSize="16px">
    <mat-grid-tile>
      <mat-card>
        <mat-card-header>
          <mat-card-title>Channel Information</mat-card-title>
        </mat-card-header>
        <mat-card-content>
          <mat-list>
            <mat-list-item><strong>ID:</strong> {{ channel.id }}</mat-list-item>
            <mat-list-item><strong>Name:</strong> {{ channel.name }}</mat-list-item>
            <mat-list-item><strong>Status:</strong> {{ channel.status }}</mat-list-item>
            <mat-list-item><strong>Contact:</strong> {{ channel.attributes.contact }}</mat-list-item>
            <mat-list-item><strong>Location:</strong> {{ channel.attributes.location }}</mat-list-item>
            <mat-list-item><strong>Created:</strong> {{ channel.attributes.created }}</mat-list-item>
          </mat-list>
        </mat-card-content>
      </mat-card>
    </mat-grid-tile>
    <mat-grid-tile>
      <mat-card>
        <mat-card-header>
          <mat-card-title>Filter Rules</mat-card-title>
        </mat-card-header>
        <mat-card-content>
          <app-filter-rules-chart [filterRules]="channel.filterRules"></app-filter-rules-chart>
        </mat-card-content>
      </mat-card>
    </mat-grid-tile>
  </mat-grid-list>
</div>
<ng-template #noData>
  <div class="no-data">No channel data available.</div>
</ng-template>
15. src/app/components/channel-details/channel-details.component.css
Styles for channel details.
.container {
  padding: 24px;
}
.no-data {
  text-align: center;
  padding: 24px;
}
16. src/app/components/filter-rules-chart/filter-rules-chart.component.ts
Component for rendering the filter rules bar chart.
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-filter-rules-chart',
  templateUrl: './filter-rules-chart.component.html',
  styleUrls: ['./filter-rules-chart.component.css']
})
export class FilterRulesChartComponent {
  @Input() filterRules: { rule: string; value: string; count: number }[] = [];

  chartData: any[] = [];
  view: [number, number] = [500, 300];
  showXAxis = true;
  showYAxis = true;
  showLegend = false;
  showXAxisLabel = true;
  xAxisLabel = 'Rule';
  showYAxisLabel = true;
  yAxisLabel = 'Count';

  ngOnChanges(): void {
    this.chartData = this.filterRules.map(rule => ({
      name: rule.rule,
      value: rule.count
    }));
  }
}
17. src/app/components/filter-rules-chart/filter-rules-chart.component.html
Template for the filter rules chart.
<ngx-charts-bar-vertical
  [view]="view"
  [results]="chartData"
  [xAxis]="showXAxis"
  [yAxis]="showYAxis"
  [legend]="showLegend"
  [xAxisLabel]="xAxisLabel"
  [yAxisLabel]="yAxisLabel"
>
</ngx-charts-bar-vertical>
18. src/app/components/filter-rules-chart/filter-rules-chart.component.css
Styles for the chart.
:host {
  display: block;
  width: 100%;
  height: 300px;
}
19. angular.json
Default Angular configuration (generated by ng new). Ensure @swimlane/ngx-charts is included in dependencies. No specific changes needed unless you customize build options.
20. package.json
Updated with Angular dependencies.
{
  "name": "gdp-channels-dashboard",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^16.0.0",
    "@angular/cdk": "^16.0.0",
    "@angular/common": "^16.0.0",
    "@angular/compiler": "^16.0.0",
    "@angular/core": "^16.0.0",
    "@angular/forms": "^16.0.0",
    "@angular/material": "^16.0.0",
    "@angular/platform-browser": "^16.0.0",
    "@angular/platform-browser-dynamic": "^16.0.0",
    "@angular/router": "^16.0.0",
    "@swimlane/ngx-charts": "^20.4.1",
    "rxjs": "~7.8.0",
    "tslib": "^2.3.0",
    "zone.js": "~0.13.0"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^16.0.0",
    "@angular/cli": "~16.0.0",
    "@angular/compiler-cli": "^16.0.0",
    "@types/jasmine": "~4.3.0",
    "jasmine-core": "~4.6.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.0.0",
    "typescript": "~4.9.5"
  }
}
21. tsconfig.json
Default TypeScript configuration (generated by ng new). No changes needed.
22. README.md
Updated for Angular.
# GDP Channels Dashboard (Angular)

An Angular-based dashboard for managing channels in an application. Displays a list of active channels with an option to view inactive ones and detailed views for each channel, including filter rules visualized as a bar chart. Data is fetched from a REST API.

## Setup Instructions

1. **Clone the Repository** (if applicable):
   ```bash
   git clone <repository-url>
   cd gdp-channels-dashboard
Install Dependencies:
npm install
Configure API Base URL:
Update the baseUrl in src/app/services/channel.service.ts:
private baseUrl = 'http://your-api-base-url/api';
Replace with your actual API URL.
Run the Application:
ng serve
Open http://localhost:4200 in your browser.
API Endpoints:
GET /api/channels: Fetch all channels.
GET /api/channels/:id: Fetch details for a specific channel.
Ensure your API supports CORS if hosted on a different domain.
Build for Production:
ng build
Deploy the dist folder to your hosting service.
Dependencies
Angular
Angular Material
NGX-Charts
RxJS
Customization
Update the API base URL in channel.service.ts.
Modify filter-rules-chart.component to customize the visualization of filter rules.
Adjust Angular Material theme in styles.css or add a custom theme.
Notes
The filter rules chart assumes a structure with rule, value, and count. Adjust as needed.
Ensure your API is accessible and returns data in the expected format.
For CORS issues, configure your backend to include appropriate headers (e.g., Access-Control-Allow-Origin).
To use a proxy for development, add to angular.json:
"serve": {
  "options": {
    "proxyConfig": "proxy.conf.json"
  }
}
Create proxy.conf.json:
{
  "/api": {
    "target": "http://your-api-base-url",
    "secure": false,
    "changeOrigin": true
  }
}
### **Notes**
- **API Integration**:
  - Update `baseUrl` in `channel.service.ts` to your actual API URL.
  - If authentication is required, add headers to HTTP requests:
    ```typescript
    this.http.get<Channel[]>(`${this.baseUrl}/channels`, {
      headers: { Authorization: `Bearer ${yourToken}` }
    });
    ```

- **Chart Customization**:
  - NGX-Charts is used for the bar chart. If you need a different chart type (e.g., pie), update `filter-rules-chart.component`.
  - Example for pie chart:
    ```html
    <ngx-charts-pie-chart [results]="chartData"></ngx-charts-pie-chart>
    ```

- **CORS**:
  - If the API is on a different domain, use a proxy (see `README.md`) or ensure the backend includes CORS headers.

- **ZIP File**:
  - Create the directory structure, copy the files above, and compress:
    ```bash
    zip -r gdp-channels-dashboard.zip gdp-channels-dashboard
    ```
  - If you prefer, I can create a GitHub Gist with all files for download as a ZIP. Let me know!

- **Testing**:
  - Run `ng test` to execute unit tests (default Karma setup).
  - Test API connectivity using browser developer tools.

If you need a Gist link, specific API customizations (e.g., different endpoints or data structure), or further assistance, please let me know!
