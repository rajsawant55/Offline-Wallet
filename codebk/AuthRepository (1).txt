package com.hackathon.offlinewallet.data

import android.content.Context
import androidx.biometric.BiometricManager
import androidx.biometric.BiometricPrompt
import androidx.core.content.ContextCompat
import androidx.fragment.app.FragmentActivity
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.tasks.await
import org.mindrot.jbcrypt.BCrypt
import javax.inject.Inject

class AuthRepository @Inject constructor(
    private val userDao: UserDao,
    private val walletDao: WalletDao,
    private val context: Context,
    private val firebaseAuth: FirebaseAuth,
    private val firestore: FirebaseFirestore
) {
    fun getUser(email: String): Flow<User?> = userDao.getUser(email)

    suspend fun register(email: String, username: String, password: String): Result<String> {
        return try {
            // Hash password
            val passwordHash = BCrypt.hashpw(password, BCrypt.gensalt())
            
            // Register with Firebase
            val authResult = firebaseAuth.createUserWithEmailAndPassword(email, password).await()
            val firebaseUser = authResult.user ?: return Result.failure(Exception("Registration failed"))

            // Store user in Firestore
            val userData = hashMapOf(
                "email" to email,
                "username" to username
            )
            firestore.collection("users").document(firebaseUser.uid).set(userData).await()

            // Store locally
            val user = User(email = email, username = username, passwordHash = passwordHash, jwtToken = firebaseUser.getIdToken(false).await().token)
            userDao.insertUser(user)
            
            // Initialize wallet
            walletDao.insertWallet(Wallet(id = "wallet_$email", balance = 0.0, userEmail = email))
            
            Result.success(email)
        } catch (e: Exception) {
            Result.failure(e)
        }
    }

    suspend fun login(email: String, password: String, activity: FragmentActivity, onBiometricPrompt: (BiometricPrompt) -> Unit): Result<String> {
        return try {
            // Check local credentials for offline login
            val localUser = userDao.getUser(email).firstOrNull()
            if (localUser != null && BCrypt.checkpw(password, localUser.passwordHash)) {
                // Biometric authentication
                if (BiometricManager.from(context).canAuthenticate(BiometricManager.Authenticators.BIOMETRIC_STRONG) == BiometricManager.BIOMETRIC_SUCCESS) {
                    val prompt = BiometricPrompt(activity, ContextCompat.getMainExecutor(context), object : BiometricPrompt.AuthenticationCallback() {
                        override fun onAuthenticationSucceeded(result: BiometricPrompt.AuthenticationResult) {
                            onBiometricPrompt(BiometricPrompt(activity, ContextCompat.getMainExecutor(context), this))
                        }
                        override fun onAuthenticationError(errorCode: Int, errString: CharSequence) {
                            throw Exception("Biometric authentication failed: $errString")
                        }
                    })
                    val promptInfo = BiometricPrompt.PromptInfo.Builder()
                        .setTitle("Biometric Login")
                        .setSubtitle("Confirm your identity")
                        .setNegativeButtonText("Cancel")
                        .build()
                    prompt.authenticate(promptInfo)
                    return Result.success(email)
                }
                return Result.success(email)
            }

            // Online login with Firebase
            val authResult = firebaseAuth.signInWithEmailAndPassword(email, password).await()
            val firebaseUser = authResult.user ?: return Result.failure(Exception("Login failed"))
            val token = firebaseUser.getIdToken(false).await().token
            userDao.updateJwtToken(email, token)
            Result.success(email)
        } catch (e: Exception) {
            Result.failure(e)
        }
    }

    fun isLoggedIn(): Boolean {
        return firebaseAuth.currentUser != null || userDao.getUser(firebaseAuth.currentUser?.email ?: "").firstOrNull() != null
    }

    fun logout() {
        firebaseAuth.signOut()
        userDao.updateJwtToken(firebaseAuth.currentUser?.email ?: "", null)
    }
}